#include "META_BlackmarketManagerSaveData.h"
#include "EMETA_TradeVendor.h"

FMETA_BlackmarketManagerSaveData::FMETA_BlackmarketManagerSaveData() {
    auto& gen2249 = (*this).GenericRecruitsPool;
    gen2249.Empty();
    auto& gen2250 = (*this).GenericCheapRecruitsPool;
    gen2250.Empty();
    auto& gen2251 = (*this).UniqueRecruitsPool;
    gen2251.Empty();
    auto& gen2252 = (*this).UnseenUnlockedCharacterTagIDs;
    gen2252.Empty();
    auto& gen2253 = (*this).UnseenUnlockedWeaponTagIDs;
    gen2253.Empty();
    auto& gen2254 = (*this).UnseenUnlockedEquipmentTagIDs;
    gen2254.Empty();
    (*this).GenericPrevID = 0;
    (*this).DayWhenHeistersMarketBecameAvailable = 0;
    (*this).DayWhenWeaponsMarketBecameAvailable = 0;
    auto& gen2255 = (*this).PlotlineAssetsPool;
    gen2255.Empty();
    auto& gen2256 = (*TBaseStructure<FGameplayTagContainer>::Get()->FindPropertyByName("GameplayTags")->ContainerPtrToValuePtr<TArray<FGameplayTag>>(&(*this).TemporaryLockedPlotlineAssetsTags, 0));
    gen2256.Empty();
    auto& gen2257 = (*TBaseStructure<FGameplayTagContainer>::Get()->FindPropertyByName("ParentTags")->ContainerPtrToValuePtr<TArray<FGameplayTag>>(&(*this).TemporaryLockedPlotlineAssetsTags, 0));
    gen2257.Empty();
    (*this).ActiveLootEvent.Vendor = EMETA_TradeVendor::UNDEFINED;
    (*TBaseStructure<FGameplayTag>::Get()->FindPropertyByName("TagName")->ContainerPtrToValuePtr<FName>(&(*this).ActiveLootEvent.LootTag, 0)) = NAME_None;
    (*this).ActiveLootEvent.MinLootValue = 0;
    (*this).ActiveLootEvent.MissionID = nullptr;
    (*this).BaseDayForLootEvents = 0;
    (*this).WeaponEvent.Cooldown = 0;
    (*this).WeaponEvent.MinAvailableCash = 0;
    (*this).WeaponEvent.NumberOfWeaponsPerEvent = 1;
    (*this).WeaponEvent.ExpirationTime = 0;
    auto& gen2258 = (*this).WeaponEvent.WeaponClassesChances;
    gen2258.Empty();
    auto& gen2259 = (*this).WeaponEvent.WeaponQualitiesChances;
    gen2259.Empty();
    (*this).BaseDayForWeaponEvent = 0;
    (*this).EquipmentEvent.Cooldown = 0;
    (*this).EquipmentEvent.MinAvailableCash = 0;
    (*this).EquipmentEvent.NumberOfEquipmentPerEvent = 1;
    (*this).EquipmentEvent.ExpirationTime = 0;
    auto& gen2260 = (*this).EquipmentEvent.EquipmentQualitiesChances;
    gen2260.Empty();
    auto& gen2261 = (*this).EquipmentEventPool;
    gen2261.Empty();
    (*this).BaseDayForEquipmentEvent = 0;
    (*this).WeaponsPoolRefreshesCounter = 0;
    (*this).WeaponsPoolRefreshesPrice = 0;
    (*this).HireArmyEventData.SoldierCostMultiplierForAttack = 0.000000000e+00f;
    (*this).HireArmyEventData.SoldierCostMultiplierForAttackNeutral = 0.000000000e+00f;
    (*this).HireArmyEventData.SoldierCostMultiplierForDefense = 0.000000000e+00f;
    (*this).HireArmyEventData.SoldierUpkeepCost = 0;
    (*this).HireArmyEventData.SoldierHireCost = 0;
    (*this).HireArmyEventData.SoldierHireCostMultiplierInPercent = 0.000000000e+00f;
    (*this).HireArmyEventData.HireArmyEventConfig.SoldierHireAmountPerHireEvent.Min = 0;
    (*this).HireArmyEventData.HireArmyEventConfig.SoldierHireAmountPerHireEvent.Max = 0;
    (*this).HireArmyEventData.HireArmyEventConfig.ShouldBeClampedByArmyCapacity = false;
    (*this).HireArmyEventData.HireArmyEventConfig.ClampedMinimumArmy = 0;
    (*this).HireArmyEventData.HireEventDelay.Min = 0;
    (*this).HireArmyEventData.HireEventDelay.Max = 0;
    (*this).HireArmyEventData.HireEventDurationTime = 0;
    (*this).AmountOfGeneratedSoldiers = 0;
    (*this).BaseDayForHireArmyEvent = 0;
    (*this).AmountOfBoughtCheapHeisters = 0;
    (*this).HeistersPoolRefreshesCounter = 0;
    (*this).HeistersPoolRefreshPrice = 0;
}

